<?php
namespace Shared\Databases\Interfaces;

use Shared\Databases\Exceptions\DatabaseSelectionException;
use Shared\Databases\Exceptions\QueryException;
use Shared\Databases\Exceptions\TableSelectionException;

/**
 * (summary missing)
 */
interface ServerInterface
{
    /************************
     *   Instance methods   *
     ***********************/

    /**
     * @param  string  $type
     * @param  array   $property
     *
     * @return  string
     */
    public function getColumnDefinition(string $type, array $property);

    /**
     * @param  string   $query
     * @param  mixed[]  $arguments
     *
     * @return  int
     */
    public function getCountFromQuery(string $query, array $arguments = []): ?int;

    /**
     * Start logging counts per query string for debugging purposes
     *
     * @return  void
     */
    public function doCountPerQuery();

    /**
     * Returns the request counts per query string for debugging puroses. Requires
     * doCountPerQuery() to have been called prior to start counting
     *
     * @return  array
     */
    public function getCountsPerQuery();

    /**
     * @param  string  $database
     *
     * @return  ServerInterface
     *
     * @throws  DatabaseSelectionException
     */
    public function setDatabase(string $database): self;

    /**
     * @return  string
     */
    public function getDatabase();

    /**
     * @return  void
     */
    public function dumpLastQuery();

    /**
     * @param  string   $query
     * @param  mixed[]  $arguments
     *
     * @return  DatasetInterface|false
     *
     * @throws  QueryException
     */
    public function execute(string $query, array $arguments = []);

    /**
     * @param  string  $table
     * @param  string  $localField
     *
     * @return  iterable
     */
    public function getForeignKey(string $table, string $localField): iterable;

    /**
     * Returns the amount of records affected by the last query
     *
     * @return  int
     */
    public function getLastAffectedRecordsCount();

    /**
     * Returns the arguments used to execute the last query
     *
     * @return  string[]
     */
    public function getLastArguments();

    /**
     * Returns the amount of records found in the last limited select query
     *
     * @return  int|null
     */
    public function getLastFoundRecordsCount();

    /**
     * Returns the last information status line returned by the server
     *
     * @return  string
     */
    public function getLastInfo();

    /**
     * Returns the insert ID (if any) that was generated by the last query
     *
     * @return  int
     */
    public function getLastInsertId();

    /**
     * Returns the last query that was executed
     *
     * @return  string
     */
    public function getLastQuery();

    /**
     * @param  string  $identifier
     *
     * @return  string
     */
    public function quoteIdentifier(string $identifier): string;

    /**
     * @param  string|null  $string  $string
     *
     * @return  string
     */
    public function quoteString(?string $string): string;

    /**
     * @param  string   $query
     * @param  mixed[]  $arguments
     *
     * @return  RecordInterface|null
     */
    public function getRecordFromQuery(string $query, array $arguments = []): ?RecordInterface;

    /**
     * @param  string  $table
     *
     * @return  TableInterface
     *
     * @throws  TableSelectionException
     */
    public function getTable(string $table): TableInterface;

    /**
     * @param  string  $table
     *
     * @return  bool
     */
    public function hasTable(string $table): bool;

    /**
     * @return  string[]
     */
    public function getTableNames();

    /**
     * @return  TableInterface[]
     */
    public function getTables();

    /**
     * @param  string   $query
     * @param  mixed[]  $arguments
     *
     * @return  mixed
     */
    public function getValueFromQuery(string $query, array $arguments = []);

    /**
     * @param  string   $query
     * @param  mixed[]  $arguments
     *
     * @return  mixed[]
     */
    public function getValuesFromQuery(string $query, array $arguments = []): array;
}
